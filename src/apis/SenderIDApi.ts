/* tslint:disable */
/* eslint-disable */
/**
 * Ducksms
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ducksms.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreatedSender,
    CreatedSenderFromJSON,
    CreatedSenderToJSON,
    DeletedSender,
    DeletedSenderFromJSON,
    DeletedSenderToJSON,
    ErrorException,
    ErrorExceptionFromJSON,
    ErrorExceptionToJSON,
    ErrorInvalidRequest,
    ErrorInvalidRequestFromJSON,
    ErrorInvalidRequestToJSON,
    ErrorNotFound,
    ErrorNotFoundFromJSON,
    ErrorNotFoundToJSON,
    ErrorUnauthenticated,
    ErrorUnauthenticatedFromJSON,
    ErrorUnauthenticatedToJSON,
    ErrorValidation,
    ErrorValidationFromJSON,
    ErrorValidationToJSON,
    GetSender,
    GetSenderFromJSON,
    GetSenderToJSON,
    ListSender,
    ListSenderFromJSON,
    ListSenderToJSON,
    Sender,
    SenderFromJSON,
    SenderToJSON,
    UpdatedSender,
    UpdatedSenderFromJSON,
    UpdatedSenderToJSON,
} from '../models';

export interface CreateSenderRequest {
    sender?: Sender;
}

export interface DeleteSenderRequest {
    id: string;
}

export interface GetSenderRequest {
    id: string;
}

export interface ListSenderRequest {
    page?: number;
    filterName?: string;
    filterStatus?: ListSenderFilterStatusEnum;
}

export interface UpdateSenderRequest {
    id: string;
    sender?: Sender;
}

/**
 * 
 */
export class SenderIDApi extends runtime.BaseAPI {

    /**
     * Create a new sender id
     * Create a Sender ID
     */
    async createSenderRaw(requestParameters: CreateSenderRequest): Promise<runtime.ApiResponse<CreatedSender>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerToken", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/senders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderToJSON(requestParameters.sender),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatedSenderFromJSON(jsonValue));
    }

    /**
     * Create a new sender id
     * Create a Sender ID
     */
    async createSender(requestParameters: CreateSenderRequest): Promise<CreatedSender> {
        const response = await this.createSenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete an existing sender id
     * Delete a Sender ID
     */
    async deleteSenderRaw(requestParameters: DeleteSenderRequest): Promise<runtime.ApiResponse<DeletedSender>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSender.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerToken", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/senders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletedSenderFromJSON(jsonValue));
    }

    /**
     * Delete an existing sender id
     * Delete a Sender ID
     */
    async deleteSender(requestParameters: DeleteSenderRequest): Promise<DeletedSender> {
        const response = await this.deleteSenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get details on a single sender id
     * Get a single Sender ID
     */
    async getSenderRaw(requestParameters: GetSenderRequest): Promise<runtime.ApiResponse<GetSender>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSender.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerToken", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/senders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSenderFromJSON(jsonValue));
    }

    /**
     * Get details on a single sender id
     * Get a single Sender ID
     */
    async getSender(requestParameters: GetSenderRequest): Promise<GetSender> {
        const response = await this.getSenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all the senders
     * List Sender ID
     */
    async listSenderRaw(requestParameters: ListSenderRequest): Promise<runtime.ApiResponse<ListSender>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.filterName !== undefined) {
            queryParameters['filter[name]'] = requestParameters.filterName;
        }

        if (requestParameters.filterStatus !== undefined) {
            queryParameters['filter[status]'] = requestParameters.filterStatus;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerToken", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/senders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListSenderFromJSON(jsonValue));
    }

    /**
     * List all the senders
     * List Sender ID
     */
    async listSender(requestParameters: ListSenderRequest): Promise<ListSender> {
        const response = await this.listSenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an existing sender id
     * Update a Sender ID
     */
    async updateSenderRaw(requestParameters: UpdateSenderRequest): Promise<runtime.ApiResponse<UpdatedSender>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSender.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerToken", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/senders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderToJSON(requestParameters.sender),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdatedSenderFromJSON(jsonValue));
    }

    /**
     * Update an existing sender id
     * Update a Sender ID
     */
    async updateSender(requestParameters: UpdateSenderRequest): Promise<UpdatedSender> {
        const response = await this.updateSenderRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum ListSenderFilterStatusEnum {
    Active = 'active',
    Inactive = 'inactive'
}
