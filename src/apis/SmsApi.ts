/* tslint:disable */
/* eslint-disable */
/**
 * Ducksms
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ducksms.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreatedSmsSend,
    CreatedSmsSendFromJSON,
    CreatedSmsSendToJSON,
    ErrorException,
    ErrorExceptionFromJSON,
    ErrorExceptionToJSON,
    ErrorInvalidRequest,
    ErrorInvalidRequestFromJSON,
    ErrorInvalidRequestToJSON,
    ErrorUnauthenticated,
    ErrorUnauthenticatedFromJSON,
    ErrorUnauthenticatedToJSON,
    ErrorValidation,
    ErrorValidationFromJSON,
    ErrorValidationToJSON,
    PreviewSmsSend,
    PreviewSmsSendFromJSON,
    PreviewSmsSendToJSON,
    SmsSchema,
    SmsSchemaFromJSON,
    SmsSchemaToJSON,
} from '../models';

export interface SmsSendRequest {
    smsSchema?: SmsSchema;
}

/**
 * 
 */
export class SmsApi extends runtime.BaseAPI {

    /**
     * Create a new sms
     * Send Sms
     */
    async smsSendRaw(requestParameters: SmsSendRequest): Promise<runtime.ApiResponse<PreviewSmsSend>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerToken", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/sms/send`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SmsSchemaToJSON(requestParameters.smsSchema),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PreviewSmsSendFromJSON(jsonValue));
    }

    /**
     * Create a new sms
     * Send Sms
     */
    async smsSend(requestParameters: SmsSendRequest): Promise<PreviewSmsSend> {
        const response = await this.smsSendRaw(requestParameters);
        return await response.value();
    }

}
