/* tslint:disable */
/* eslint-disable */
/**
 * Ducksms
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ducksms.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreditBalance,
    CreditBalanceFromJSON,
    CreditBalanceToJSON,
    CreditHistory,
    CreditHistoryFromJSON,
    CreditHistoryToJSON,
    ErrorException,
    ErrorExceptionFromJSON,
    ErrorExceptionToJSON,
    ErrorInvalidRequest,
    ErrorInvalidRequestFromJSON,
    ErrorInvalidRequestToJSON,
    ErrorNotFound,
    ErrorNotFoundFromJSON,
    ErrorNotFoundToJSON,
    ErrorUnauthenticated,
    ErrorUnauthenticatedFromJSON,
    ErrorUnauthenticatedToJSON,
} from '../models';

export interface CreditHistoryRequest {
    page?: number;
    filterType?: CreditHistoryFilterTypeEnum;
    filterSmsSmsid?: number;
}

/**
 * 
 */
export class CreditApi extends runtime.BaseAPI {

    /**
     * Get available credit balance
     * Credit Balance
     */
    async creditBalanceRaw(): Promise<runtime.ApiResponse<CreditBalance>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerToken", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/credits/balance`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditBalanceFromJSON(jsonValue));
    }

    /**
     * Get available credit balance
     * Credit Balance
     */
    async creditBalance(): Promise<CreditBalance> {
        const response = await this.creditBalanceRaw();
        return await response.value();
    }

    /**
     * Get all credit history
     * Credit History
     */
    async creditHistoryRaw(requestParameters: CreditHistoryRequest): Promise<runtime.ApiResponse<CreditHistory>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.filterType !== undefined) {
            queryParameters['filter[type]'] = requestParameters.filterType;
        }

        if (requestParameters.filterSmsSmsid !== undefined) {
            queryParameters['filter[sms.smsid]'] = requestParameters.filterSmsSmsid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerToken", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/credits/history`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditHistoryFromJSON(jsonValue));
    }

    /**
     * Get all credit history
     * Credit History
     */
    async creditHistory(requestParameters: CreditHistoryRequest): Promise<CreditHistory> {
        const response = await this.creditHistoryRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum CreditHistoryFilterTypeEnum {
    Credit = 'credit',
    Charge = 'charge',
    Pending = 'pending',
    Freeze = 'freeze',
    Bonus = 'bonus'
}
